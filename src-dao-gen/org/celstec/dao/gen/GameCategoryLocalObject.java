package org.celstec.dao.gen;

import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GAME_CATEGORY_LOCAL_OBJECT.
 */
public class GameCategoryLocalObject {

    private Long id;
    private Boolean deleted;
    private Long categoryId;
    private Long gameId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GameCategoryLocalObjectDao myDao;

    private StoreGameLocalObject storeGameLocalObject;
    private Long storeGameLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GameCategoryLocalObject() {
    }

    public GameCategoryLocalObject(Long id) {
        this.id = id;
    }

    public GameCategoryLocalObject(Long id, Boolean deleted, Long categoryId, Long gameId) {
        this.id = id;
        this.deleted = deleted;
        this.categoryId = categoryId;
        this.gameId = gameId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGameCategoryLocalObjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getGameId() {
        return gameId;
    }

    public void setGameId(Long gameId) {
        this.gameId = gameId;
    }

    /** To-one relationship, resolved on first access. */
    public StoreGameLocalObject getStoreGameLocalObject() {
        Long __key = this.gameId;
        if (storeGameLocalObject__resolvedKey == null || !storeGameLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreGameLocalObjectDao targetDao = daoSession.getStoreGameLocalObjectDao();
            StoreGameLocalObject storeGameLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                storeGameLocalObject = storeGameLocalObjectNew;
            	storeGameLocalObject__resolvedKey = __key;
            }
        }
        return storeGameLocalObject;
    }

    public void setStoreGameLocalObject(StoreGameLocalObject storeGameLocalObject) {
        synchronized (this) {
            this.storeGameLocalObject = storeGameLocalObject;
            gameId = storeGameLocalObject == null ? null : storeGameLocalObject.getId();
            storeGameLocalObject__resolvedKey = gameId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
