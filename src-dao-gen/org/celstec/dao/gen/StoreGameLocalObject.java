package org.celstec.dao.gen;

import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.celstec.arlearn2.beans.deserializer.json.JsonBeanDeserializer;
import org.celstec.arlearn2.beans.game.Game;
import org.codehaus.jettison.json.JSONException;
import org.osmdroid.api.IGeoPoint;
import org.osmdroid.util.BoundingBoxE6;
import org.osmdroid.util.GeoPoint;
// KEEP INCLUDES END
/**
 * Entity mapped to table STORE_GAME_LOCAL_OBJECT.
 */
public class StoreGameLocalObject {

    private Long id;
    /** Not-null value. */
    private String title;
    private String licenseCode;
    private String description;
    private String bean;
    private Boolean mapAvailable;
    private Boolean deleted;
    private Long lastModificationDate;
    private byte[] icon;
    private Double lat;
    private Double lng;
    private Boolean featured;
    private Integer featuredRank;
    private Long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StoreGameLocalObjectDao myDao;

    private CategoryLocalObject categoryLocalObject;
    private Long categoryLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public StoreGameLocalObject() {
    }

    public StoreGameLocalObject(Long id) {
        this.id = id;
    }

    public StoreGameLocalObject(Long id, String title, String licenseCode, String description, String bean, Boolean mapAvailable, Boolean deleted, Long lastModificationDate, byte[] icon, Double lat, Double lng, Boolean featured, Integer featuredRank, Long categoryId) {
        this.id = id;
        this.title = title;
        this.licenseCode = licenseCode;
        this.description = description;
        this.bean = bean;
        this.mapAvailable = mapAvailable;
        this.deleted = deleted;
        this.lastModificationDate = lastModificationDate;
        this.icon = icon;
        this.lat = lat;
        this.lng = lng;
        this.featured = featured;
        this.featuredRank = featuredRank;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStoreGameLocalObjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getLicenseCode() {
        return licenseCode;
    }

    public void setLicenseCode(String licenseCode) {
        this.licenseCode = licenseCode;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getBean() {
        return bean;
    }

    public void setBean(String bean) {
        this.bean = bean;
    }

    public Boolean getMapAvailable() {
        return mapAvailable;
    }

    public void setMapAvailable(Boolean mapAvailable) {
        this.mapAvailable = mapAvailable;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public Long getLastModificationDate() {
        return lastModificationDate;
    }

    public void setLastModificationDate(Long lastModificationDate) {
        this.lastModificationDate = lastModificationDate;
    }

    public byte[] getIcon() {
        return icon;
    }

    public void setIcon(byte[] icon) {
        this.icon = icon;
    }

    public Double getLat() {
        return lat;
    }

    public void setLat(Double lat) {
        this.lat = lat;
    }

    public Double getLng() {
        return lng;
    }

    public void setLng(Double lng) {
        this.lng = lng;
    }

    public Boolean getFeatured() {
        return featured;
    }

    public void setFeatured(Boolean featured) {
        this.featured = featured;
    }

    public Integer getFeaturedRank() {
        return featuredRank;
    }

    public void setFeaturedRank(Integer featuredRank) {
        this.featuredRank = featuredRank;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public CategoryLocalObject getCategoryLocalObject() {
        Long __key = this.categoryId;
        if (categoryLocalObject__resolvedKey == null || !categoryLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryLocalObjectDao targetDao = daoSession.getCategoryLocalObjectDao();
            CategoryLocalObject categoryLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                categoryLocalObject = categoryLocalObjectNew;
            	categoryLocalObject__resolvedKey = __key;
            }
        }
        return categoryLocalObject;
    }

    public void setCategoryLocalObject(CategoryLocalObject categoryLocalObject) {
        synchronized (this) {
            this.categoryLocalObject = categoryLocalObject;
            categoryId = categoryLocalObject == null ? null : categoryLocalObject.getId();
            categoryLocalObject__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Game getGameBean() {
        try{
            return (Game) JsonBeanDeserializer.deserialize(getBean());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    public boolean isContainedWithin(BoundingBoxE6 boundingBox) {
        return boundingBox.contains(new GeoPoint((int)(getLat() * 1E6), (int)(getLng() * 1E6)));
    }
    // KEEP METHODS END

}
