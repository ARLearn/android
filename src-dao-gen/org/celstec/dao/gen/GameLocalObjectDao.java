package org.celstec.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.GameLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_LOCAL_OBJECT.
*/
public class GameLocalObjectDao extends AbstractDao<GameLocalObject, Long> {

    public static final String TABLENAME = "GAME_LOCAL_OBJECT";

    /**
     * Properties of entity GameLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property LicenseCode = new Property(2, String.class, "licenseCode", false, "LICENSE_CODE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Bean = new Property(4, String.class, "bean", false, "BEAN");
        public final static Property MapAvailable = new Property(5, Boolean.class, "mapAvailable", false, "MAP_AVAILABLE");
        public final static Property Deleted = new Property(6, Boolean.class, "deleted", false, "DELETED");
        public final static Property LastModificationDate = new Property(7, Long.class, "lastModificationDate", false, "LAST_MODIFICATION_DATE");
        public final static Property LastSyncGeneralItemsDate = new Property(8, Long.class, "lastSyncGeneralItemsDate", false, "LAST_SYNC_GENERAL_ITEMS_DATE");
        public final static Property Icon = new Property(9, byte[].class, "icon", false, "ICON");
        public final static Property Lat = new Property(10, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(11, Double.class, "lng", false, "LNG");
    };

    private DaoSession daoSession;


    public GameLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public GameLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'LICENSE_CODE' TEXT," + // 2: licenseCode
                "'DESCRIPTION' TEXT," + // 3: description
                "'BEAN' TEXT," + // 4: bean
                "'MAP_AVAILABLE' INTEGER," + // 5: mapAvailable
                "'DELETED' INTEGER," + // 6: deleted
                "'LAST_MODIFICATION_DATE' INTEGER," + // 7: lastModificationDate
                "'LAST_SYNC_GENERAL_ITEMS_DATE' INTEGER," + // 8: lastSyncGeneralItemsDate
                "'ICON' BLOB," + // 9: icon
                "'LAT' REAL," + // 10: lat
                "'LNG' REAL);"); // 11: lng
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String licenseCode = entity.getLicenseCode();
        if (licenseCode != null) {
            stmt.bindString(3, licenseCode);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String bean = entity.getBean();
        if (bean != null) {
            stmt.bindString(5, bean);
        }
 
        Boolean mapAvailable = entity.getMapAvailable();
        if (mapAvailable != null) {
            stmt.bindLong(6, mapAvailable ? 1l: 0l);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(7, deleted ? 1l: 0l);
        }
 
        Long lastModificationDate = entity.getLastModificationDate();
        if (lastModificationDate != null) {
            stmt.bindLong(8, lastModificationDate);
        }
 
        Long lastSyncGeneralItemsDate = entity.getLastSyncGeneralItemsDate();
        if (lastSyncGeneralItemsDate != null) {
            stmt.bindLong(9, lastSyncGeneralItemsDate);
        }
 
        byte[] icon = entity.getIcon();
        if (icon != null) {
            stmt.bindBlob(10, icon);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(11, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(12, lng);
        }
    }

    @Override
    protected void attachEntity(GameLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameLocalObject readEntity(Cursor cursor, int offset) {
        GameLocalObject entity = new GameLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // licenseCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bean
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // mapAvailable
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // deleted
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // lastModificationDate
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // lastSyncGeneralItemsDate
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // icon
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // lat
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11) // lng
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setLicenseCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBean(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMapAvailable(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDeleted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setLastModificationDate(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setLastSyncGeneralItemsDate(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIcon(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setLat(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setLng(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
