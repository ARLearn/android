package org.celstec.dao.gen;

import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table INQUIRY_QUESTION_LOCAL_OBJECT.
 */
public class InquiryQuestionLocalObject {

    private String identifier;
    private String title;
    private String description;
    private Long inquiryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient InquiryQuestionLocalObjectDao myDao;

    private InquiryLocalObject inquiryLocalObject;
    private Long inquiryLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public InquiryQuestionLocalObject() {
    }

    public InquiryQuestionLocalObject(String identifier) {
        this.identifier = identifier;
    }

    public InquiryQuestionLocalObject(String identifier, String title, String description, Long inquiryId) {
        this.identifier = identifier;
        this.title = title;
        this.description = description;
        this.inquiryId = inquiryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInquiryQuestionLocalObjectDao() : null;
    }

    public String getIdentifier() {
        return identifier;
    }

    public void setIdentifier(String identifier) {
        this.identifier = identifier;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getInquiryId() {
        return inquiryId;
    }

    public void setInquiryId(Long inquiryId) {
        this.inquiryId = inquiryId;
    }

    /** To-one relationship, resolved on first access. */
    public InquiryLocalObject getInquiryLocalObject() {
        Long __key = this.inquiryId;
        if (inquiryLocalObject__resolvedKey == null || !inquiryLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InquiryLocalObjectDao targetDao = daoSession.getInquiryLocalObjectDao();
            InquiryLocalObject inquiryLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                inquiryLocalObject = inquiryLocalObjectNew;
            	inquiryLocalObject__resolvedKey = __key;
            }
        }
        return inquiryLocalObject;
    }

    public void setInquiryLocalObject(InquiryLocalObject inquiryLocalObject) {
        synchronized (this) {
            this.inquiryLocalObject = inquiryLocalObject;
            inquiryId = inquiryLocalObject == null ? null : inquiryLocalObject.getId();
            inquiryLocalObject__resolvedKey = inquiryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
