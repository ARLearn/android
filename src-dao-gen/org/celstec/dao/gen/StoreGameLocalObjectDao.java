package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.StoreGameLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STORE_GAME_LOCAL_OBJECT.
*/
public class StoreGameLocalObjectDao extends AbstractDao<StoreGameLocalObject, Long> {

    public static final String TABLENAME = "STORE_GAME_LOCAL_OBJECT";

    /**
     * Properties of entity StoreGameLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property LicenseCode = new Property(2, String.class, "licenseCode", false, "LICENSE_CODE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Bean = new Property(4, String.class, "bean", false, "BEAN");
        public final static Property MapAvailable = new Property(5, Boolean.class, "mapAvailable", false, "MAP_AVAILABLE");
        public final static Property Deleted = new Property(6, Boolean.class, "deleted", false, "DELETED");
        public final static Property LastModificationDate = new Property(7, Long.class, "lastModificationDate", false, "LAST_MODIFICATION_DATE");
        public final static Property Icon = new Property(8, byte[].class, "icon", false, "ICON");
        public final static Property Lat = new Property(9, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(10, Double.class, "lng", false, "LNG");
        public final static Property Featured = new Property(11, Boolean.class, "featured", false, "FEATURED");
        public final static Property FeaturedRank = new Property(12, Integer.class, "featuredRank", false, "FEATURED_RANK");
        public final static Property CategoryId = new Property(13, Long.class, "categoryId", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;


    public StoreGameLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public StoreGameLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STORE_GAME_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'LICENSE_CODE' TEXT," + // 2: licenseCode
                "'DESCRIPTION' TEXT," + // 3: description
                "'BEAN' TEXT," + // 4: bean
                "'MAP_AVAILABLE' INTEGER," + // 5: mapAvailable
                "'DELETED' INTEGER," + // 6: deleted
                "'LAST_MODIFICATION_DATE' INTEGER," + // 7: lastModificationDate
                "'ICON' BLOB," + // 8: icon
                "'LAT' REAL," + // 9: lat
                "'LNG' REAL," + // 10: lng
                "'FEATURED' INTEGER," + // 11: featured
                "'FEATURED_RANK' INTEGER," + // 12: featuredRank
                "'CATEGORY_ID' INTEGER);"); // 13: categoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STORE_GAME_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoreGameLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String licenseCode = entity.getLicenseCode();
        if (licenseCode != null) {
            stmt.bindString(3, licenseCode);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String bean = entity.getBean();
        if (bean != null) {
            stmt.bindString(5, bean);
        }
 
        Boolean mapAvailable = entity.getMapAvailable();
        if (mapAvailable != null) {
            stmt.bindLong(6, mapAvailable ? 1l: 0l);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(7, deleted ? 1l: 0l);
        }
 
        Long lastModificationDate = entity.getLastModificationDate();
        if (lastModificationDate != null) {
            stmt.bindLong(8, lastModificationDate);
        }
 
        byte[] icon = entity.getIcon();
        if (icon != null) {
            stmt.bindBlob(9, icon);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(10, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(11, lng);
        }
 
        Boolean featured = entity.getFeatured();
        if (featured != null) {
            stmt.bindLong(12, featured ? 1l: 0l);
        }
 
        Integer featuredRank = entity.getFeaturedRank();
        if (featuredRank != null) {
            stmt.bindLong(13, featuredRank);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(14, categoryId);
        }
    }

    @Override
    protected void attachEntity(StoreGameLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StoreGameLocalObject readEntity(Cursor cursor, int offset) {
        StoreGameLocalObject entity = new StoreGameLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // licenseCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bean
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // mapAvailable
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // deleted
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // lastModificationDate
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // icon
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // lat
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // lng
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // featured
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // featuredRank
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // categoryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StoreGameLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setLicenseCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBean(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMapAvailable(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDeleted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setLastModificationDate(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setLat(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLng(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setFeatured(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setFeaturedRank(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCategoryId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StoreGameLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StoreGameLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryLocalObjectDao().getAllColumns());
            builder.append(" FROM STORE_GAME_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN CATEGORY_LOCAL_OBJECT T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StoreGameLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        StoreGameLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CategoryLocalObject categoryLocalObject = loadCurrentOther(daoSession.getCategoryLocalObjectDao(), cursor, offset);
        entity.setCategoryLocalObject(categoryLocalObject);

        return entity;    
    }

    public StoreGameLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StoreGameLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StoreGameLocalObject> list = new ArrayList<StoreGameLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StoreGameLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StoreGameLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
