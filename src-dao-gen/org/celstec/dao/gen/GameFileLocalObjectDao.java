package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.GameFileLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_FILE_LOCAL_OBJECT.
*/
public class GameFileLocalObjectDao extends AbstractDao<GameFileLocalObject, Long> {

    public static final String TABLENAME = "GAME_FILE_LOCAL_OBJECT";

    /**
     * Properties of entity GameFileLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Md5Hash = new Property(1, String.class, "md5Hash", false, "MD5_HASH");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Uri = new Property(3, String.class, "uri", false, "URI");
        public final static Property Size = new Property(4, Long.class, "size", false, "SIZE");
        public final static Property SyncStatus = new Property(5, Integer.class, "syncStatus", false, "SYNC_STATUS");
        public final static Property Deleted = new Property(6, Boolean.class, "deleted", false, "DELETED");
        public final static Property GameId = new Property(7, long.class, "gameId", false, "GAME_ID");
        public final static Property GeneralItem = new Property(8, Long.class, "generalItem", false, "GENERAL_ITEM");
    };

    private DaoSession daoSession;

    private Query<GameFileLocalObject> gameLocalObject_GameFilesQuery;
    private Query<GameFileLocalObject> generalItemLocalObject_GeneralItemFilesQuery;

    public GameFileLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public GameFileLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_FILE_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MD5_HASH' TEXT," + // 1: md5Hash
                "'PATH' TEXT," + // 2: path
                "'URI' TEXT," + // 3: uri
                "'SIZE' INTEGER," + // 4: size
                "'SYNC_STATUS' INTEGER," + // 5: syncStatus
                "'DELETED' INTEGER," + // 6: deleted
                "'GAME_ID' INTEGER NOT NULL ," + // 7: gameId
                "'GENERAL_ITEM' INTEGER);"); // 8: generalItem
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_FILE_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameFileLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String md5Hash = entity.getMd5Hash();
        if (md5Hash != null) {
            stmt.bindString(2, md5Hash);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(4, uri);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(5, size);
        }
 
        Integer syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindLong(6, syncStatus);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(7, deleted ? 1l: 0l);
        }
        stmt.bindLong(8, entity.getGameId());
 
        Long generalItem = entity.getGeneralItem();
        if (generalItem != null) {
            stmt.bindLong(9, generalItem);
        }
    }

    @Override
    protected void attachEntity(GameFileLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameFileLocalObject readEntity(Cursor cursor, int offset) {
        GameFileLocalObject entity = new GameFileLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // md5Hash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uri
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // syncStatus
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // deleted
            cursor.getLong(offset + 7), // gameId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // generalItem
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameFileLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMd5Hash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSyncStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDeleted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setGameId(cursor.getLong(offset + 7));
        entity.setGeneralItem(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameFileLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameFileLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "gameFiles" to-many relationship of GameLocalObject. */
    public List<GameFileLocalObject> _queryGameLocalObject_GameFiles(long gameId) {
        synchronized (this) {
            if (gameLocalObject_GameFilesQuery == null) {
                QueryBuilder<GameFileLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GameId.eq(null));
                gameLocalObject_GameFilesQuery = queryBuilder.build();
            }
        }
        Query<GameFileLocalObject> query = gameLocalObject_GameFilesQuery.forCurrentThread();
        query.setParameter(0, gameId);
        return query.list();
    }

    /** Internal query to resolve the "generalItemFiles" to-many relationship of GeneralItemLocalObject. */
    public List<GameFileLocalObject> _queryGeneralItemLocalObject_GeneralItemFiles(Long generalItem) {
        synchronized (this) {
            if (generalItemLocalObject_GeneralItemFilesQuery == null) {
                QueryBuilder<GameFileLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GeneralItem.eq(null));
                generalItemLocalObject_GeneralItemFilesQuery = queryBuilder.build();
            }
        }
        Query<GameFileLocalObject> query = generalItemLocalObject_GeneralItemFilesQuery.forCurrentThread();
        query.setParameter(0, generalItem);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGameLocalObjectDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGeneralItemLocalObjectDao().getAllColumns());
            builder.append(" FROM GAME_FILE_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN GAME_LOCAL_OBJECT T0 ON T.'GAME_ID'=T0.'_id'");
            builder.append(" LEFT JOIN GENERAL_ITEM_LOCAL_OBJECT T1 ON T.'GENERAL_ITEM'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GameFileLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        GameFileLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GameLocalObject gameLocalObject = loadCurrentOther(daoSession.getGameLocalObjectDao(), cursor, offset);
         if(gameLocalObject != null) {
            entity.setGameLocalObject(gameLocalObject);
        }
        offset += daoSession.getGameLocalObjectDao().getAllColumns().length;

        GeneralItemLocalObject generalItemLocalObject = loadCurrentOther(daoSession.getGeneralItemLocalObjectDao(), cursor, offset);
        entity.setGeneralItemLocalObject(generalItemLocalObject);

        return entity;    
    }

    public GameFileLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GameFileLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GameFileLocalObject> list = new ArrayList<GameFileLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GameFileLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GameFileLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
