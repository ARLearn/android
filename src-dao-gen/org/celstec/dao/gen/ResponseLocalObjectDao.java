package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.ResponseLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RESPONSE_LOCAL_OBJECT.
*/
public class ResponseLocalObjectDao extends AbstractDao<ResponseLocalObject, Long> {

    public static final String TABLENAME = "RESPONSE_LOCAL_OBJECT";

    /**
     * Properties of entity ResponseLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property ContentType = new Property(2, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property UriAsString = new Property(3, String.class, "UriAsString", false, "URI_AS_STRING");
        public final static Property ThumbnailUriAsString = new Property(4, String.class, "ThumbnailUriAsString", false, "THUMBNAIL_URI_AS_STRING");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
        public final static Property IsSynchronized = new Property(6, Boolean.class, "isSynchronized", false, "IS_SYNCHRONIZED");
        public final static Property Revoked = new Property(7, Boolean.class, "revoked", false, "REVOKED");
        public final static Property NextSynchronisationTime = new Property(8, Long.class, "nextSynchronisationTime", false, "NEXT_SYNCHRONISATION_TIME");
        public final static Property AmountOfSynchronisationAttempts = new Property(9, Integer.class, "amountOfSynchronisationAttempts", false, "AMOUNT_OF_SYNCHRONISATION_ATTEMPTS");
        public final static Property TimeStamp = new Property(10, Long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Width = new Property(11, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(12, Integer.class, "height", false, "HEIGHT");
        public final static Property Lat = new Property(13, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(14, Double.class, "lng", false, "LNG");
        public final static Property RunId = new Property(15, long.class, "runId", false, "RUN_ID");
        public final static Property GeneralItem = new Property(16, long.class, "generalItem", false, "GENERAL_ITEM");
        public final static Property Account = new Property(17, Long.class, "account", false, "ACCOUNT");
    };

    private DaoSession daoSession;

    private Query<ResponseLocalObject> runLocalObject_ResponsesQuery;
    private Query<ResponseLocalObject> generalItemLocalObject_ResponsesQuery;

    public ResponseLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public ResponseLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RESPONSE_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' INTEGER," + // 1: type
                "'CONTENT_TYPE' TEXT," + // 2: contentType
                "'URI_AS_STRING' TEXT," + // 3: UriAsString
                "'THUMBNAIL_URI_AS_STRING' TEXT," + // 4: ThumbnailUriAsString
                "'VALUE' TEXT," + // 5: value
                "'IS_SYNCHRONIZED' INTEGER," + // 6: isSynchronized
                "'REVOKED' INTEGER," + // 7: revoked
                "'NEXT_SYNCHRONISATION_TIME' INTEGER," + // 8: nextSynchronisationTime
                "'AMOUNT_OF_SYNCHRONISATION_ATTEMPTS' INTEGER," + // 9: amountOfSynchronisationAttempts
                "'TIME_STAMP' INTEGER," + // 10: timeStamp
                "'WIDTH' INTEGER," + // 11: width
                "'HEIGHT' INTEGER," + // 12: height
                "'LAT' REAL," + // 13: lat
                "'LNG' REAL," + // 14: lng
                "'RUN_ID' INTEGER NOT NULL ," + // 15: runId
                "'GENERAL_ITEM' INTEGER NOT NULL ," + // 16: generalItem
                "'ACCOUNT' INTEGER);"); // 17: account
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RESPONSE_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ResponseLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(3, contentType);
        }
 
        String UriAsString = entity.getUriAsString();
        if (UriAsString != null) {
            stmt.bindString(4, UriAsString);
        }
 
        String ThumbnailUriAsString = entity.getThumbnailUriAsString();
        if (ThumbnailUriAsString != null) {
            stmt.bindString(5, ThumbnailUriAsString);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        Boolean isSynchronized = entity.getIsSynchronized();
        if (isSynchronized != null) {
            stmt.bindLong(7, isSynchronized ? 1l: 0l);
        }
 
        Boolean revoked = entity.getRevoked();
        if (revoked != null) {
            stmt.bindLong(8, revoked ? 1l: 0l);
        }
 
        Long nextSynchronisationTime = entity.getNextSynchronisationTime();
        if (nextSynchronisationTime != null) {
            stmt.bindLong(9, nextSynchronisationTime);
        }
 
        Integer amountOfSynchronisationAttempts = entity.getAmountOfSynchronisationAttempts();
        if (amountOfSynchronisationAttempts != null) {
            stmt.bindLong(10, amountOfSynchronisationAttempts);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(11, timeStamp);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(12, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(13, height);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(14, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(15, lng);
        }
        stmt.bindLong(16, entity.getRunId());
        stmt.bindLong(17, entity.getGeneralItem());
 
        Long account = entity.getAccount();
        if (account != null) {
            stmt.bindLong(18, account);
        }
    }

    @Override
    protected void attachEntity(ResponseLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ResponseLocalObject readEntity(Cursor cursor, int offset) {
        ResponseLocalObject entity = new ResponseLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contentType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UriAsString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ThumbnailUriAsString
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // value
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isSynchronized
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // revoked
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // nextSynchronisationTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // amountOfSynchronisationAttempts
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // timeStamp
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // width
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // height
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // lat
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // lng
            cursor.getLong(offset + 15), // runId
            cursor.getLong(offset + 16), // generalItem
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // account
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ResponseLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setContentType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUriAsString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbnailUriAsString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSynchronized(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setRevoked(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setNextSynchronisationTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setAmountOfSynchronisationAttempts(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTimeStamp(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setWidth(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setHeight(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setLat(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setLng(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setRunId(cursor.getLong(offset + 15));
        entity.setGeneralItem(cursor.getLong(offset + 16));
        entity.setAccount(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ResponseLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ResponseLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "responses" to-many relationship of RunLocalObject. */
    public List<ResponseLocalObject> _queryRunLocalObject_Responses(long runId) {
        synchronized (this) {
            if (runLocalObject_ResponsesQuery == null) {
                QueryBuilder<ResponseLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RunId.eq(null));
                runLocalObject_ResponsesQuery = queryBuilder.build();
            }
        }
        Query<ResponseLocalObject> query = runLocalObject_ResponsesQuery.forCurrentThread();
        query.setParameter(0, runId);
        return query.list();
    }

    /** Internal query to resolve the "responses" to-many relationship of GeneralItemLocalObject. */
    public List<ResponseLocalObject> _queryGeneralItemLocalObject_Responses(long generalItem) {
        synchronized (this) {
            if (generalItemLocalObject_ResponsesQuery == null) {
                QueryBuilder<ResponseLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GeneralItem.eq(null));
                generalItemLocalObject_ResponsesQuery = queryBuilder.build();
            }
        }
        Query<ResponseLocalObject> query = generalItemLocalObject_ResponsesQuery.forCurrentThread();
        query.setParameter(0, generalItem);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGeneralItemLocalObjectDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAccountLocalObjectDao().getAllColumns());
            builder.append(" FROM RESPONSE_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN GENERAL_ITEM_LOCAL_OBJECT T0 ON T.'GENERAL_ITEM'=T0.'_id'");
            builder.append(" LEFT JOIN ACCOUNT_LOCAL_OBJECT T1 ON T.'ACCOUNT'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ResponseLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        ResponseLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GeneralItemLocalObject generalItemLocalObject = loadCurrentOther(daoSession.getGeneralItemLocalObjectDao(), cursor, offset);
         if(generalItemLocalObject != null) {
            entity.setGeneralItemLocalObject(generalItemLocalObject);
        }
        offset += daoSession.getGeneralItemLocalObjectDao().getAllColumns().length;

        AccountLocalObject accountLocalObject = loadCurrentOther(daoSession.getAccountLocalObjectDao(), cursor, offset);
        entity.setAccountLocalObject(accountLocalObject);

        return entity;    
    }

    public ResponseLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ResponseLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ResponseLocalObject> list = new ArrayList<ResponseLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ResponseLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ResponseLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
