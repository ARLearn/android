package org.celstec.dao.gen;

import android.net.Uri;
import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.celstec.arlearn2.android.util.MediaFolders;
import org.celstec.arlearn2.beans.game.GameFile;
import java.io.File;
// KEEP INCLUDES END
/**
 * Entity mapped to table GAME_FILE_LOCAL_OBJECT.
 */
public class GameFileLocalObject {

    private Long id;
    private String md5Hash;
    private String path;
    private String uri;
    private Long size;
    private Integer syncStatus;
    private Boolean deleted;
    private long gameId;
    private Long generalItem;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GameFileLocalObjectDao myDao;

    private GameLocalObject gameLocalObject;
    private Long gameLocalObject__resolvedKey;

    private GeneralItemLocalObject generalItemLocalObject;
    private Long generalItemLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public final static  int FILE_TO_DOWNLOAD = 0;
    public final static  int FILE_IS_DOWNLOADING = 1;
    public final static  int FILE_DOWNLOADED = 2;
    public final static  int FILE_DELETED = 3;
    public GameFileLocalObject(GameFile gameFile) {
        setMd5Hash(gameFile.getMd5Hash());
        setSize(gameFile.getSize());
        setId(gameFile.getId());
        setPath(gameFile.getPath());
        setDeleted(gameFile.getDeleted());
    }
    // KEEP FIELDS END

    public GameFileLocalObject() {
    }

    public GameFileLocalObject(Long id) {
        this.id = id;
    }

    public GameFileLocalObject(Long id, String md5Hash, String path, String uri, Long size, Integer syncStatus, Boolean deleted, long gameId, Long generalItem) {
        this.id = id;
        this.md5Hash = md5Hash;
        this.path = path;
        this.uri = uri;
        this.size = size;
        this.syncStatus = syncStatus;
        this.deleted = deleted;
        this.gameId = gameId;
        this.generalItem = generalItem;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGameFileLocalObjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMd5Hash() {
        return md5Hash;
    }

    public void setMd5Hash(String md5Hash) {
        this.md5Hash = md5Hash;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getUri() {
        return uri;
    }

    public void setUri(String uri) {
        this.uri = uri;
    }

    public Long getSize() {
        return size;
    }

    public void setSize(Long size) {
        this.size = size;
    }

    public Integer getSyncStatus() {
        return syncStatus;
    }

    public void setSyncStatus(Integer syncStatus) {
        this.syncStatus = syncStatus;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public long getGameId() {
        return gameId;
    }

    public void setGameId(long gameId) {
        this.gameId = gameId;
    }

    public Long getGeneralItem() {
        return generalItem;
    }

    public void setGeneralItem(Long generalItem) {
        this.generalItem = generalItem;
    }

    /** To-one relationship, resolved on first access. */
    public GameLocalObject getGameLocalObject() {
        long __key = this.gameId;
        if (gameLocalObject__resolvedKey == null || !gameLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GameLocalObjectDao targetDao = daoSession.getGameLocalObjectDao();
            GameLocalObject gameLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                gameLocalObject = gameLocalObjectNew;
            	gameLocalObject__resolvedKey = __key;
            }
        }
        return gameLocalObject;
    }

    public void setGameLocalObject(GameLocalObject gameLocalObject) {
        if (gameLocalObject == null) {
            throw new DaoException("To-one property 'gameId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.gameLocalObject = gameLocalObject;
            gameId = gameLocalObject.getId();
            gameLocalObject__resolvedKey = gameId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public GeneralItemLocalObject getGeneralItemLocalObject() {
        Long __key = this.generalItem;
        if (generalItemLocalObject__resolvedKey == null || !generalItemLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GeneralItemLocalObjectDao targetDao = daoSession.getGeneralItemLocalObjectDao();
            GeneralItemLocalObject generalItemLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                generalItemLocalObject = generalItemLocalObjectNew;
            	generalItemLocalObject__resolvedKey = __key;
            }
        }
        return generalItemLocalObject;
    }

    public void setGeneralItemLocalObject(GeneralItemLocalObject generalItemLocalObject) {
        synchronized (this) {
            this.generalItemLocalObject = generalItemLocalObject;
            generalItem = generalItemLocalObject == null ? null : generalItemLocalObject.getId();
            generalItemLocalObject__resolvedKey = generalItem;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public File getLocalFile() {
        return new File(MediaFolders.getIncommingFilesDir()+"/"+getGameId()+getPath());
    }

    public Uri getLocalUri() {
        if (getUri() != null) return Uri.parse(getUri());
        File file = getLocalFile();
        return Uri.fromFile(file);
    }
    // KEEP METHODS END

}
