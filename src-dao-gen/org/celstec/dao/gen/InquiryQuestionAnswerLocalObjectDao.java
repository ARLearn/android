package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.InquiryQuestionAnswerLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INQUIRY_QUESTION_ANSWER_LOCAL_OBJECT.
*/
public class InquiryQuestionAnswerLocalObjectDao extends AbstractDao<InquiryQuestionAnswerLocalObject, String> {

    public static final String TABLENAME = "INQUIRY_QUESTION_ANSWER_LOCAL_OBJECT";

    /**
     * Properties of entity InquiryQuestionAnswerLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Identifier = new Property(0, String.class, "identifier", true, "IDENTIFIER");
        public final static Property Question = new Property(1, String.class, "question", false, "QUESTION");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Answer = new Property(3, String.class, "answer", false, "ANSWER");
        public final static Property InquiryId = new Property(4, Long.class, "inquiryId", false, "INQUIRY_ID");
        public final static Property QuestionId = new Property(5, String.class, "questionId", false, "QUESTION_ID");
    };

    private DaoSession daoSession;

    private Query<InquiryQuestionAnswerLocalObject> inquiryLocalObject_AnswersQuery;
    private Query<InquiryQuestionAnswerLocalObject> inquiryQuestionLocalObject_AnswersQuery;

    public InquiryQuestionAnswerLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public InquiryQuestionAnswerLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INQUIRY_QUESTION_ANSWER_LOCAL_OBJECT' (" + //
                "'IDENTIFIER' TEXT PRIMARY KEY NOT NULL ," + // 0: identifier
                "'QUESTION' TEXT," + // 1: question
                "'DESCRIPTION' TEXT," + // 2: description
                "'ANSWER' TEXT," + // 3: answer
                "'INQUIRY_ID' INTEGER," + // 4: inquiryId
                "'QUESTION_ID' TEXT);"); // 5: questionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INQUIRY_QUESTION_ANSWER_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InquiryQuestionAnswerLocalObject entity) {
        stmt.clearBindings();
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(1, identifier);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        Long inquiryId = entity.getInquiryId();
        if (inquiryId != null) {
            stmt.bindLong(5, inquiryId);
        }
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(6, questionId);
        }
    }

    @Override
    protected void attachEntity(InquiryQuestionAnswerLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InquiryQuestionAnswerLocalObject readEntity(Cursor cursor, int offset) {
        InquiryQuestionAnswerLocalObject entity = new InquiryQuestionAnswerLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // identifier
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // inquiryId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // questionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InquiryQuestionAnswerLocalObject entity, int offset) {
        entity.setIdentifier(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInquiryId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setQuestionId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(InquiryQuestionAnswerLocalObject entity, long rowId) {
        return entity.getIdentifier();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(InquiryQuestionAnswerLocalObject entity) {
        if(entity != null) {
            return entity.getIdentifier();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "answers" to-many relationship of InquiryLocalObject. */
    public List<InquiryQuestionAnswerLocalObject> _queryInquiryLocalObject_Answers(Long inquiryId) {
        synchronized (this) {
            if (inquiryLocalObject_AnswersQuery == null) {
                QueryBuilder<InquiryQuestionAnswerLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InquiryId.eq(null));
                inquiryLocalObject_AnswersQuery = queryBuilder.build();
            }
        }
        Query<InquiryQuestionAnswerLocalObject> query = inquiryLocalObject_AnswersQuery.forCurrentThread();
        query.setParameter(0, inquiryId);
        return query.list();
    }

    /** Internal query to resolve the "answers" to-many relationship of InquiryQuestionLocalObject. */
    public List<InquiryQuestionAnswerLocalObject> _queryInquiryQuestionLocalObject_Answers(String questionId) {
        synchronized (this) {
            if (inquiryQuestionLocalObject_AnswersQuery == null) {
                QueryBuilder<InquiryQuestionAnswerLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionId.eq(null));
                inquiryQuestionLocalObject_AnswersQuery = queryBuilder.build();
            }
        }
        Query<InquiryQuestionAnswerLocalObject> query = inquiryQuestionLocalObject_AnswersQuery.forCurrentThread();
        query.setParameter(0, questionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getInquiryLocalObjectDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getInquiryQuestionLocalObjectDao().getAllColumns());
            builder.append(" FROM INQUIRY_QUESTION_ANSWER_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN INQUIRY_LOCAL_OBJECT T0 ON T.'INQUIRY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN INQUIRY_QUESTION_LOCAL_OBJECT T1 ON T.'QUESTION_ID'=T1.'IDENTIFIER'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected InquiryQuestionAnswerLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        InquiryQuestionAnswerLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        InquiryLocalObject inquiryLocalObject = loadCurrentOther(daoSession.getInquiryLocalObjectDao(), cursor, offset);
        entity.setInquiryLocalObject(inquiryLocalObject);
        offset += daoSession.getInquiryLocalObjectDao().getAllColumns().length;

        InquiryQuestionLocalObject inquiryQuestionLocalObject = loadCurrentOther(daoSession.getInquiryQuestionLocalObjectDao(), cursor, offset);
        entity.setInquiryQuestionLocalObject(inquiryQuestionLocalObject);

        return entity;    
    }

    public InquiryQuestionAnswerLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<InquiryQuestionAnswerLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InquiryQuestionAnswerLocalObject> list = new ArrayList<InquiryQuestionAnswerLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<InquiryQuestionAnswerLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<InquiryQuestionAnswerLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
